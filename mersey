#!/usr/bin/env php
<?php

use Weeks\Mersey\Console;
use Weeks\Mersey\Schema;
use Weeks\Mersey\Services\JsonValidator;
use Weeks\Mersey\Services\Ping;

if (file_exists(__DIR__ . '/vendor/autoload.php')) {
    require __DIR__ . '/vendor/autoload.php';
} else {
    require __DIR__ . '/../../autoload.php';
}

if (file_exists(__DIR__ . '/.env')) {
    $dotEnv = new Dotenv\Dotenv(__DIR__);
    $dotEnv->load();
}

$env = env('APP_ENV', 'production');
$home = env('HOME');

define('MERSEY_VERSION', '2.0.0');
$mersey = new \Weeks\Mersey\Mersey(
    new Console('Mersey', MERSEY_VERSION),
    new Ping('127.0.0.1', 2)
);

$mersey->singleton(JsonValidator::class, function () {
    return new JsonValidator();
});

$mersey->bind('servers_schema', function () use ($env, $home) {
    return new Schema('servers-schema.json', $env, $home);
});

$mersey->bind('scripts_schema', function () use ($env, $home) {
    return new Schema('scripts-schema.json', $env, $home);
});

/** @var JsonValidator $validator */
$validator = $mersey->make(JsonValidator::class);
$serversSchema = $mersey->make('servers_schema');
$scriptsSchema = $mersey->make('scripts_schema');
$servers = $mersey->loadServerConfig($env);
$scripts = $mersey->loadScriptConfig($env);

try {
    $validator->setSchema($serversSchema)->validate($servers);
    $validator->setSchema($scriptsSchema)->validate($scripts);
} catch (\Exception $e) {
    $mersey->renderException($e);
}

$mersey->registerGlobalScripts($scripts);
$mersey->registerServers($servers);
$mersey->run();